<?php

/**
 * BaseMarkaProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $slug
 * @property integer $category_id
 * @property integer $colorscheme_id
 * @property date $manufactured
 * @property string $token
 * @property integer $stockqty
 * @property double $cadprice
 * @property boolean $is_active
 * @property boolean $featured
 * @property string $description
 * @property string $short
 * @property MarkaCategory $Category
 * @property MarkaColorScheme $ColorScheme
 * @property Doctrine_Collection $Images
 * 
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getSlug()           Returns the current record's "slug" value
 * @method integer             getCategoryId()     Returns the current record's "category_id" value
 * @method integer             getColorschemeId()  Returns the current record's "colorscheme_id" value
 * @method date                getManufactured()   Returns the current record's "manufactured" value
 * @method string              getToken()          Returns the current record's "token" value
 * @method integer             getStockqty()       Returns the current record's "stockqty" value
 * @method double              getCadprice()       Returns the current record's "cadprice" value
 * @method boolean             getIsActive()       Returns the current record's "is_active" value
 * @method boolean             getFeatured()       Returns the current record's "featured" value
 * @method string              getDescription()    Returns the current record's "description" value
 * @method string              getShort()          Returns the current record's "short" value
 * @method MarkaCategory       getCategory()       Returns the current record's "Category" value
 * @method MarkaColorScheme    getColorScheme()    Returns the current record's "ColorScheme" value
 * @method Doctrine_Collection getImages()         Returns the current record's "Images" collection
 * @method MarkaProduct        setName()           Sets the current record's "name" value
 * @method MarkaProduct        setSlug()           Sets the current record's "slug" value
 * @method MarkaProduct        setCategoryId()     Sets the current record's "category_id" value
 * @method MarkaProduct        setColorschemeId()  Sets the current record's "colorscheme_id" value
 * @method MarkaProduct        setManufactured()   Sets the current record's "manufactured" value
 * @method MarkaProduct        setToken()          Sets the current record's "token" value
 * @method MarkaProduct        setStockqty()       Sets the current record's "stockqty" value
 * @method MarkaProduct        setCadprice()       Sets the current record's "cadprice" value
 * @method MarkaProduct        setIsActive()       Sets the current record's "is_active" value
 * @method MarkaProduct        setFeatured()       Sets the current record's "featured" value
 * @method MarkaProduct        setDescription()    Sets the current record's "description" value
 * @method MarkaProduct        setShort()          Sets the current record's "short" value
 * @method MarkaProduct        setCategory()       Sets the current record's "Category" value
 * @method MarkaProduct        setColorScheme()    Sets the current record's "ColorScheme" value
 * @method MarkaProduct        setImages()         Sets the current record's "Images" collection
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMarkaProduct extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('marka_product');
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 50,
             ));
        $this->hasColumn('slug', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 50,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('colorscheme_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('manufactured', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('stockqty', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('cadprice', 'double', null, array(
             'type' => 'double',
             'notnull' => true,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('featured', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('description', 'string', 2000, array(
             'type' => 'string',
             'length' => 2000,
             ));
        $this->hasColumn('short', 'string', 100, array(
             'type' => 'string',
             'length' => 100,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MarkaCategory as Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('MarkaColorScheme as ColorScheme', array(
             'local' => 'colorscheme_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasMany('MarkaProductImage as Images', array(
             'local' => 'id',
             'foreign' => 'product_id',
             'cascade' => array(
             0 => 'delete',
             )));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}